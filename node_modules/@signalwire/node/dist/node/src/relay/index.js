"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSession_1 = __importDefault(require("../../../common/src/BaseSession"));
const Calling_1 = __importDefault(require("../../../common/src/relay/calling/Calling"));
const Tasking_1 = __importDefault(require("../../../common/src/relay/tasking/Tasking"));
const Messaging_1 = __importDefault(require("../../../common/src/relay/messaging/Messaging"));
const logger_1 = __importDefault(require("../../../common/src/util/logger"));
class RelayClient extends BaseSession_1.default {
    constructor(options) {
        super(options);
        this.options = options;
        this._doKeepAlive = true;
        this._calling = null;
        this._tasking = null;
        this._messaging = null;
        this._handleSignals();
    }
    get calling() {
        if (!this._calling) {
            this._calling = new Calling_1.default(this);
        }
        return this._calling;
    }
    get tasking() {
        if (!this._tasking) {
            this._tasking = new Tasking_1.default(this);
        }
        return this._tasking;
    }
    get messaging() {
        if (!this._messaging) {
            this._messaging = new Messaging_1.default(this);
        }
        return this._messaging;
    }
    _handleSignals() {
        const _gracefulDisconnect = () => __awaiter(this, void 0, void 0, function* () {
            logger_1.default.info('Disconnecting from Relay...');
            yield this.disconnect();
        });
        process.on('SIGTERM', _gracefulDisconnect);
        process.on('SIGINT', _gracefulDisconnect);
    }
}
exports.default = RelayClient;
