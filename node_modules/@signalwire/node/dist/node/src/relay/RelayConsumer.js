"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
const logger_1 = __importDefault(require("../../../common/src/util/logger"));
const util_1 = require("util");
const Receive_1 = __importDefault(require("../../../common/src/services/Receive"));
class RelayConsumer {
    constructor(params) {
        this.host = null;
        this.project = null;
        this.token = null;
        this.contexts = [];
        const { host, project, token, contexts = [], onIncomingCall, onIncomingMessage, onMessageStateChange, onTask, setup, ready, teardown } = params;
        this.host = host;
        this.project = project;
        this.token = token;
        this.contexts = contexts;
        if (util_1.isFunction(onIncomingCall)) {
            this.onIncomingCall = onIncomingCall.bind(this);
        }
        if (util_1.isFunction(onIncomingMessage)) {
            this.onIncomingMessage = onIncomingMessage.bind(this);
        }
        if (util_1.isFunction(onMessageStateChange)) {
            this.onMessageStateChange = onMessageStateChange.bind(this);
        }
        if (util_1.isFunction(onTask)) {
            this.onTask = onTask.bind(this);
        }
        if (util_1.isFunction(setup)) {
            this.setup = setup.bind(this);
        }
        if (util_1.isFunction(ready)) {
            this.ready = ready.bind(this);
        }
        if (util_1.isFunction(teardown)) {
            process.on('exit', () => teardown(this));
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (util_1.isFunction(this.setup)) {
                this.setup(this);
            }
            const { host, project, token, contexts } = this;
            if (!project || !token || !contexts.length) {
                logger_1.default.error('"project", "token" and "contexts" are required!');
                return;
            }
            this.client = new index_1.default({ host, project, token });
            this.client.__logger.setLevel(this.client.__logger.levels.INFO);
            this.client.on('signalwire.error', error => {
                logger_1.default.error('RelayConsumer error:', error);
            });
            this.client.on('signalwire.ready', (client) => __awaiter(this, void 0, void 0, function* () {
                const success = yield Receive_1.default(this.client, this.contexts);
                if (success) {
                    const promises = [];
                    if (this.onIncomingCall) {
                        promises.push(client.calling.onReceive(this.contexts, this.onIncomingCall));
                    }
                    if (this.onIncomingMessage) {
                        promises.push(client.messaging.onReceive(this.contexts, this.onIncomingMessage));
                    }
                    if (this.onMessageStateChange) {
                        promises.push(client.messaging.onStateChange(this.contexts, this.onMessageStateChange));
                    }
                    if (this.onTask) {
                        promises.push(client.tasking.onReceive(this.contexts, this.onTask));
                    }
                    yield promises;
                }
                if (util_1.isFunction(this.ready)) {
                    this.ready(this);
                }
            }));
            yield this.client.connect();
        });
    }
}
exports.default = RelayConsumer;
