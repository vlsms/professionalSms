"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseComponent_1 = require("./BaseComponent");
const Blade_1 = require("../../../messages/Blade");
const results_1 = require("../results");
class Controllable extends BaseComponent_1.BaseComponent {
    _execute(method) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const msg = new Blade_1.Execute({
                    protocol: this.call.relayInstance.session.relayProtocol,
                    method,
                    params: {
                        node_id: this.call.nodeId,
                        call_id: this.call.id,
                        control_id: this.controlId
                    }
                });
                return yield this.call._execute(msg);
            }
            catch (error) {
                return error;
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._execute(`${this.method}.stop`);
            return new results_1.StopResult(result);
        });
    }
    pause() {
        return __awaiter(this, void 0, void 0, function* () {
            const { code } = yield this._execute(`${this.method}.pause`);
            return code === '200';
        });
    }
    resume() {
        return __awaiter(this, void 0, void 0, function* () {
            const { code } = yield this._execute(`${this.method}.resume`);
            return code === '200';
        });
    }
    volume(value) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const msg = new Blade_1.Execute({
                    protocol: this.call.relayInstance.session.relayProtocol,
                    method: `${this.method}.volume`,
                    params: {
                        node_id: this.call.nodeId,
                        call_id: this.call.id,
                        control_id: this.controlId,
                        volume: value
                    }
                });
                yield this.call._execute(msg);
                return true;
            }
            catch (error) {
                return false;
            }
        });
    }
}
exports.Controllable = Controllable;
