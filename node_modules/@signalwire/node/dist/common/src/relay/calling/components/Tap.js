"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Controllable_1 = require("./Controllable");
const relay_1 = require("../../../util/constants/relay");
const Event_1 = __importDefault(require("../Event"));
class Tap extends Controllable_1.Controllable {
    constructor(call, tap, device) {
        super(call);
        this.call = call;
        this.tap = tap;
        this.device = device;
        this.eventType = relay_1.CallNotification.Tap;
        this.method = relay_1.CallMethod.Tap;
        this.controlId = this.controlId;
    }
    get payload() {
        return {
            node_id: this.call.nodeId,
            call_id: this.call.id,
            control_id: this.controlId,
            tap: this.tap,
            device: this.device
        };
    }
    get sourceDevice() {
        if (!this._executeResult) {
            return null;
        }
        const { source_device = null } = this._executeResult;
        return source_device;
    }
    notificationHandler(params) {
        const { state, tap, device } = params;
        this.tap = tap;
        this.device = device;
        this.state = state;
        this.completed = this.state === relay_1.CallTapState.Finished;
        if (this.completed) {
            this.successful = true;
            this.event = new Event_1.default(this.state, params);
        }
        if (this._hasBlocker() && this._eventsToWait.includes(this.state)) {
            this.blocker.resolve();
        }
    }
}
exports.Tap = Tap;
