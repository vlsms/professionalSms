"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Controllable_1 = require("./Controllable");
const relay_1 = require("../../../util/constants/relay");
const Event_1 = __importDefault(require("../Event"));
class Play extends Controllable_1.Controllable {
    constructor(call, play, volumeValue = 0) {
        super(call);
        this.call = call;
        this.play = play;
        this.volumeValue = volumeValue;
        this.eventType = relay_1.CallNotification.Play;
        this.method = relay_1.CallMethod.Play;
        this.controlId = this.controlId;
    }
    get payload() {
        const tmp = {
            node_id: this.call.nodeId,
            call_id: this.call.id,
            control_id: this.controlId,
            play: this.play
        };
        if (this.volumeValue != 0) {
            tmp.volume = +this.volumeValue;
        }
        return tmp;
    }
    notificationHandler(params) {
        this.state = params.state;
        this.completed = this.state !== relay_1.CallPlayState.Playing;
        if (this.completed) {
            this.successful = this.state === relay_1.CallPlayState.Finished;
            this.event = new Event_1.default(this.state, params);
        }
        if (this._hasBlocker() && this._eventsToWait.includes(this.state)) {
            this.blocker.resolve();
        }
    }
}
exports.Play = Play;
