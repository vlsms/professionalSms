"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const logger_1 = __importDefault(require("../../util/logger"));
const relay_1 = require("../../util/constants/relay");
const helpers_1 = require("../helpers");
const helpers_2 = require("../../util/helpers");
const components_1 = require("./components");
const actions_1 = require("./actions");
const results_1 = require("./results");
class Call {
    constructor(relayInstance, options) {
        this.relayInstance = relayInstance;
        this.options = options;
        this.tag = uuid_1.v4();
        this.state = relay_1.CallState.None;
        this.prevState = relay_1.CallState.None;
        this.failed = false;
        this.busy = false;
        this._cbQueue = {};
        this._components = [];
        const { call_id, node_id } = options;
        this.id = call_id;
        this.nodeId = node_id;
        if (!this.device && this.devices && !this.isMultiDial) {
            this.setOptions({ device: this.devices.flat(Infinity)[0] });
        }
        this.amd = this.detectAnsweringMachine.bind(this);
        this.amdAsync = this.detectAnsweringMachineAsync.bind(this);
        this.relayInstance.addCall(this);
    }
    get answered() {
        return this.state === relay_1.CallState.Answered;
    }
    get active() {
        return !this.ended;
    }
    get ended() {
        return this.state === relay_1.CallState.Ending || this.state === relay_1.CallState.Ended;
    }
    get context() {
        return this.options.context;
    }
    get peer() {
        const { peer: { call_id = null } = {} } = this.options;
        return this.relayInstance.getCallById(call_id);
    }
    get device() {
        return this.options.device;
    }
    get devices() {
        return this.options.devices;
    }
    get ready() {
        return Boolean(this.id);
    }
    get type() {
        const { type } = this.options.device;
        return type;
    }
    get from() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (this.device.type === 'phone') {
            return (_c = (_b = (_a = this.device) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.from_number) !== null && _c !== void 0 ? _c : '';
        }
        else if (this.device.type === 'sip') {
            return (_f = (_e = (_d = this.device) === null || _d === void 0 ? void 0 : _d.params) === null || _e === void 0 ? void 0 : _e.from) !== null && _f !== void 0 ? _f : '';
        }
        return (_j = (_h = (_g = this.device) === null || _g === void 0 ? void 0 : _g.params) === null || _h === void 0 ? void 0 : _h.from) !== null && _j !== void 0 ? _j : '';
    }
    get to() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (this.device.type === 'phone') {
            return (_c = (_b = (_a = this.device) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.to_number) !== null && _c !== void 0 ? _c : '';
        }
        else if (this.device.type === 'sip') {
            return (_f = (_e = (_d = this.device) === null || _d === void 0 ? void 0 : _d.params) === null || _e === void 0 ? void 0 : _e.to) !== null && _f !== void 0 ? _f : '';
        }
        return (_j = (_h = (_g = this.device) === null || _g === void 0 ? void 0 : _g.params) === null || _h === void 0 ? void 0 : _h.to) !== null && _j !== void 0 ? _j : '';
    }
    get timeout() {
        var _a, _b, _c, _d, _e, _f;
        if (this.device.type === 'phone') {
            return (_c = (_b = (_a = this.device) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.timeout) !== null && _c !== void 0 ? _c : relay_1.DEFAULT_CALL_TIMEOUT;
        }
        else if (this.device.type === 'sip') {
            return (_f = (_e = (_d = this.device) === null || _d === void 0 ? void 0 : _d.params) === null || _e === void 0 ? void 0 : _e.timeout) !== null && _f !== void 0 ? _f : null;
        }
        return null;
    }
    get headers() {
        var _a, _b, _c;
        if (this.device.type === 'sip') {
            return (_c = (_b = (_a = this.device) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.headers) !== null && _c !== void 0 ? _c : null;
        }
        return null;
    }
    get region() {
        return this.options.region;
    }
    get isMultiDial() {
        var _a;
        return !this.device && ((_a = this.devices) === null || _a === void 0 ? void 0 : _a.flat(Infinity).length) > 1;
    }
    setOptions(opts) {
        this.options = Object.assign(Object.assign({}, this.options), opts);
    }
    _execute(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.relayInstance.session.execute(msg);
            }
            catch (error) {
                logger_1.default.error(`Relay command failed with code: ${error.code} - ${error.message}`);
                throw error;
            }
        });
    }
    dial() {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Dial(this);
            this._addComponent(component);
            yield component._waitFor(relay_1.DialState.Answered, relay_1.DialState.Failed);
            return new results_1.DialResult(component);
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Disconnect(this);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallConnectState.Failed, relay_1.CallConnectState.Disconnected);
            return new results_1.DisconnectResult(component);
        });
    }
    hangup(reason = relay_1.DisconnectReason.Hangup) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Hangup(this, reason);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallState.Ended);
            return new results_1.HangupResult(component);
        });
    }
    answer() {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Answer(this);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallState.Answered, relay_1.CallState.Ending, relay_1.CallState.Ended);
            return new results_1.AnswerResult(component);
        });
    }
    record(record = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Record(this, helpers_1.prepareRecordParams(record));
            this._addComponent(component);
            yield component._waitFor(relay_1.CallRecordState.NoInput, relay_1.CallRecordState.Finished);
            return new results_1.RecordResult(component);
        });
    }
    recordAsync(record = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.Record(this, helpers_1.prepareRecordParams(record));
            this._addComponent(component);
            const { url } = yield component.execute();
            component.url = url;
            return new actions_1.RecordAction(component);
        });
    }
    play(...params) {
        return __awaiter(this, void 0, void 0, function* () {
            const [play, volume] = helpers_1.preparePlayParams(params);
            const component = new components_1.Play(this, play, volume);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallPlayState.Error, relay_1.CallPlayState.Finished);
            return new results_1.PlayResult(component);
        });
    }
    playAsync(...params) {
        return __awaiter(this, void 0, void 0, function* () {
            const [play, volume] = helpers_1.preparePlayParams(params);
            const component = new components_1.Play(this, play, volume);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.PlayAction(component);
        });
    }
    playAudio(params) {
        const [url, volume] = helpers_1.preparePlayAudioParams(params);
        const media = [{ type: relay_1.CallPlayType.Audio, params: { url } }];
        return this.play({ media, volume });
    }
    playAudioAsync(params) {
        const [url, volume] = helpers_1.preparePlayAudioParams(params);
        const media = [{ type: relay_1.CallPlayType.Audio, params: { url } }];
        return this.playAsync({ media, volume });
    }
    playSilence(duration) {
        return this.play({ type: relay_1.CallPlayType.Silence, params: { duration } });
    }
    playSilenceAsync(duration) {
        return this.playAsync({ type: relay_1.CallPlayType.Silence, params: { duration } });
    }
    playRingtone(params) {
        const { volume = 0 } = params;
        delete params.volume;
        const media = [{ type: relay_1.CallPlayType.Ringtone, params }];
        return this.play({ media, volume });
    }
    playRingtoneAsync(params) {
        const { volume = 0 } = params;
        delete params.volume;
        const media = [{ type: relay_1.CallPlayType.Ringtone, params }];
        return this.playAsync({ media, volume });
    }
    playTTS(params) {
        const { volume = 0 } = params;
        delete params.volume;
        const media = [{ type: relay_1.CallPlayType.TTS, params }];
        return this.play({ media, volume });
    }
    playTTSAsync(params) {
        const { volume = 0 } = params;
        delete params.volume;
        const media = [{ type: relay_1.CallPlayType.TTS, params }];
        return this.playAsync({ media, volume });
    }
    prompt(params, ...mediaList) {
        return __awaiter(this, void 0, void 0, function* () {
            const [collect, play, volume] = helpers_1.preparePromptParams(params, mediaList);
            const component = new components_1.Prompt(this, collect, play, volume);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallPromptState.Error, relay_1.CallPromptState.NoInput, relay_1.CallPromptState.NoMatch, relay_1.CallPromptState.Digit, relay_1.CallPromptState.Speech);
            return new results_1.PromptResult(component);
        });
    }
    promptAsync(params, ...mediaList) {
        return __awaiter(this, void 0, void 0, function* () {
            const [collect, play, volume] = helpers_1.preparePromptParams(params, mediaList);
            const component = new components_1.Prompt(this, collect, play, volume);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.PromptAction(component);
        });
    }
    promptAudio(params, url = '') {
        const collect = helpers_1.preparePromptAudioParams(params, url);
        return this.prompt(collect);
    }
    promptAudioAsync(params, url = '') {
        const collect = helpers_1.preparePromptAudioParams(params, url);
        return this.promptAsync(collect);
    }
    promptRingtone(params) {
        const collect = helpers_1.preparePromptRingtoneParams(params);
        return this.prompt(collect);
    }
    promptRingtoneAsync(params) {
        const collect = helpers_1.preparePromptRingtoneParams(params);
        return this.promptAsync(collect);
    }
    promptTTS(params, ttsOptions = { text: '' }) {
        const collect = helpers_1.preparePromptTTSParams(params, ttsOptions);
        return this.prompt(collect);
    }
    promptTTSAsync(params, ttsOptions = { text: '' }) {
        const collect = helpers_1.preparePromptTTSParams(params, ttsOptions);
        return this.promptAsync(collect);
    }
    connect(...params) {
        return __awaiter(this, void 0, void 0, function* () {
            const [devices, ringback] = helpers_1.prepareConnectParams(params, this.device);
            const component = new components_1.Connect(this, devices, ringback);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallConnectState.Failed, relay_1.CallConnectState.Connected);
            return new results_1.ConnectResult(component);
        });
    }
    connectAsync(...params) {
        return __awaiter(this, void 0, void 0, function* () {
            const [devices, ringback] = helpers_1.prepareConnectParams(params, this.device);
            const component = new components_1.Connect(this, devices, ringback);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.ConnectAction(component);
        });
    }
    waitFor(...events) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!events.length) {
                events = [relay_1.CallState.Ended];
            }
            const currentStateIndex = relay_1.CALL_STATES.indexOf(this.state);
            for (let i = 0; i < events.length; i++) {
                const index = relay_1.CALL_STATES.indexOf(events[i]);
                if (index <= currentStateIndex) {
                    return true;
                }
            }
            const component = new components_1.Await(this);
            this._addComponent(component);
            yield component._waitFor(...events);
            return component.successful;
        });
    }
    waitForRinging() {
        return this.waitFor(relay_1.CallState.Ringing);
    }
    waitForAnswered() {
        return this.waitFor(relay_1.CallState.Answered);
    }
    waitForEnding() {
        return this.waitFor(relay_1.CallState.Ending);
    }
    waitForEnded() {
        return this.waitFor(relay_1.CallState.Ended);
    }
    faxReceive() {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.FaxReceive(this);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallFaxState.Error, relay_1.CallFaxState.Finished);
            return new results_1.FaxResult(component);
        });
    }
    faxReceiveAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.FaxReceive(this);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.FaxAction(component);
        });
    }
    faxSend(document, identity = null, header = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.FaxSend(this, document, identity, header);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallFaxState.Error, relay_1.CallFaxState.Finished);
            return new results_1.FaxResult(component);
        });
    }
    faxSendAsync(document, identity = null, header = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.FaxSend(this, document, identity, header);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.FaxAction(component);
        });
    }
    detect(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { type, timeout, wait_for_beep = false } = options, params = __rest(options, ["type", "timeout", "wait_for_beep"]);
            const component = new components_1.Detect(this, { type, params }, timeout, wait_for_beep);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallDetectState.Machine, relay_1.CallDetectState.Human, relay_1.CallDetectState.Unknown, relay_1.CallDetectState.CED, relay_1.CallDetectState.CNG);
            return new results_1.DetectResult(component);
        });
    }
    detectAsync(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { type, timeout } = options, params = __rest(options, ["type", "timeout"]);
            const component = new components_1.Detect(this, { type, params }, timeout);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.DetectAction(component);
        });
    }
    detectAnsweringMachine(params = {}) {
        params.type = relay_1.CallDetectType.Machine;
        return this.detect(params);
    }
    detectAnsweringMachineAsync(params = {}) {
        params.type = relay_1.CallDetectType.Machine;
        return this.detectAsync(params);
    }
    detectHuman(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.warn('detectHuman has been deprecated: use detectAnsweringMachine instead.');
            params.type = relay_1.CallDetectType.Machine;
            const result = yield this.detect(params);
            result.component.successful = result.component.result === relay_1.CallDetectState.Human;
            return result;
        });
    }
    detectHumanAsync(params = {}) {
        logger_1.default.warn('detectHumanAsync has been deprecated: use detectAnsweringMachineAsync instead.');
        params.type = relay_1.CallDetectType.Machine;
        return this.detectAsync(params);
    }
    detectMachine(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.warn('detectMachine has been deprecated: use detectAnsweringMachine instead.');
            params.type = relay_1.CallDetectType.Machine;
            const result = yield this.detect(params);
            result.component.successful = result.component.result === relay_1.CallDetectState.Machine;
            return result;
        });
    }
    detectMachineAsync(params = {}) {
        logger_1.default.warn('detectMachineAsync has been deprecated: use detectAnsweringMachineAsync instead.');
        params.type = relay_1.CallDetectType.Machine;
        return this.detectAsync(params);
    }
    detectFax({ tone, timeout } = {}) {
        return this.detect({ type: relay_1.CallDetectType.Fax, tone, timeout });
    }
    detectFaxAsync({ tone, timeout } = {}) {
        return this.detectAsync({ type: relay_1.CallDetectType.Fax, tone, timeout });
    }
    detectDigit({ digits, timeout } = {}) {
        return this.detect({ type: relay_1.CallDetectType.Digit, digits, timeout });
    }
    detectDigitAsync({ digits, timeout } = {}) {
        return this.detectAsync({ type: relay_1.CallDetectType.Digit, digits, timeout });
    }
    tap(params, deprecatedDevice = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { tap, device } = helpers_1.prepareTapParams(params, deprecatedDevice);
            const component = new components_1.Tap(this, tap, device);
            this._addComponent(component);
            yield component._waitFor(relay_1.CallTapState.Finished);
            return new results_1.TapResult(component);
        });
    }
    tapAsync(params, deprecatedDevice = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { tap, device } = helpers_1.prepareTapParams(params, deprecatedDevice);
            const component = new components_1.Tap(this, tap, device);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.TapAction(component);
        });
    }
    sendDigits(digits) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.SendDigits(this, digits);
            this._addComponent(component);
            yield component._waitFor(relay_1.SendDigitsState.Finished);
            return new results_1.SendDigitsResult(component);
        });
    }
    sendDigitsAsync(digits) {
        return __awaiter(this, void 0, void 0, function* () {
            const component = new components_1.SendDigits(this, digits);
            this._addComponent(component);
            yield component.execute();
            return new actions_1.SendDigitsAction(component);
        });
    }
    on(event, callback) {
        this._cbQueue[event] = callback;
        return this;
    }
    off(event, callback) {
        delete this._cbQueue[event];
        return this;
    }
    _stateChange(params) {
        const { call_state, end_reason } = params;
        this.prevState = this.state;
        this.state = call_state;
        this._notifyComponents(relay_1.CallNotification.State, this.tag, params);
        this._dispatchCallback('stateChange');
        this._dispatchCallback(call_state);
        if (this.state === relay_1.CallState.Ended) {
            this.busy = end_reason === relay_1.DisconnectReason.Busy;
            this.failed = end_reason === relay_1.DisconnectReason.Error;
            this._terminateComponents(params);
            this.relayInstance.removeCall(this);
        }
    }
    _dialChange(params) {
        const { dial_state, call } = params;
        switch (dial_state) {
            case relay_1.DialState.Answered:
                if (call) {
                    this.setOptions(call);
                    this.id = call.call_id;
                    this.nodeId = call.node_id;
                }
                break;
        }
        this._notifyComponents(relay_1.CallNotification.Dial, this.tag, params);
    }
    _connectChange(params) {
        const { connect_state, peer } = params;
        switch (connect_state) {
            case relay_1.CallConnectState.Connected:
                if (peer) {
                    this.setOptions({ peer });
                }
                break;
            case relay_1.CallConnectState.Disconnected:
                this.setOptions({ peer: undefined });
                break;
        }
        this._notifyComponents(relay_1.CallNotification.Connect, this.tag, params);
        this._dispatchCallback('connect.stateChange');
        this._dispatchCallback(`connect.${connect_state}`);
    }
    _recordChange(params) {
        this._notifyComponents(relay_1.CallNotification.Record, params.control_id, params);
        this._dispatchCallback('record.stateChange', params);
        this._dispatchCallback(`record.${params.state}`, params);
    }
    _playChange(params) {
        this._notifyComponents(relay_1.CallNotification.Play, params.control_id, params);
        this._dispatchCallback('play.stateChange', params);
        this._dispatchCallback(`play.${params.state}`, params);
    }
    _collectChange(params) {
        this._notifyComponents(relay_1.CallNotification.Collect, params.control_id, params);
        this._dispatchCallback('collect', params);
        this._dispatchCallback('prompt', params);
    }
    _faxChange(params) {
        this._notifyComponents(relay_1.CallNotification.Fax, params.control_id, params);
        this._dispatchCallback('fax.stateChange', params);
        if (params.fax && params.fax.type) {
            this._dispatchCallback(`fax.${params.fax.type}`, params);
        }
    }
    _detectChange(params) {
        this._notifyComponents(relay_1.CallNotification.Detect, params.control_id, params);
        const { params: { event = null } } = params.detect;
        if (event === relay_1.CallDetectState.Finished || event === relay_1.CallDetectState.Error) {
            this._dispatchCallback(`detect.${event}`, params);
        }
        else if (event) {
            this._dispatchCallback('detect.update', params);
        }
    }
    _tapChange(params) {
        this._notifyComponents(relay_1.CallNotification.Tap, params.control_id, params);
        this._dispatchCallback(`tap.${params.state}`, params);
    }
    _sendDigitsChange(params) {
        this._notifyComponents(relay_1.CallNotification.SendDigits, params.control_id, params);
        this._dispatchCallback(`sendDigits.stateChange`, params);
        this._dispatchCallback(`sendDigits.${params.state}`, params);
    }
    _notifyComponents(eventType, controlId, params) {
        this._components.forEach(component => {
            if (component.completed === false && component.eventType === eventType && component.controlId === controlId) {
                component.notificationHandler(params);
            }
        });
    }
    _terminateComponents(params) {
        this._components.forEach(component => {
            if (component.completed === false) {
                component.terminate(params);
            }
        });
    }
    _addComponent(component) {
        this._components.push(component);
    }
    _dispatchCallback(key, ...params) {
        const { [key]: handler } = this._cbQueue;
        if (helpers_2.isFunction(handler)) {
            handler(this, ...params);
            return true;
        }
        return false;
    }
}
exports.default = Call;
