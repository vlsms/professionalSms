import { Execute } from '../../messages/Blade';
import { ICall, ICallOptions, ICallDevice, IMakeCallParams, ICallingPlay, ICallingPlayParams, ICallingCollect, DeepArray, ICallingDetect, ICallingTapTap, ICallingTapDevice, ICallingRecord, IRelayCallingPlay, ICallingPlayRingtone, ICallingPlayTTS, ICallingCollectAudio, ICallingCollectTTS, ICallingTapFlat, ICallingCollectRingtone, ICallingConnectParams, ICallPeer, SipHeader } from '../../util/interfaces';
import Calling from './Calling';
import { RecordAction, PlayAction, PromptAction, ConnectAction, FaxAction, DetectAction, TapAction, SendDigitsAction } from './actions';
import { HangupResult, RecordResult, AnswerResult, PlayResult, PromptResult, ConnectResult, DialResult, FaxResult, DetectResult, TapResult, SendDigitsResult, DisconnectResult } from './results';
export default class Call implements ICall {
    relayInstance: Calling;
    protected options: ICallOptions;
    id: string;
    tag: string;
    nodeId: string;
    state: string;
    prevState: string;
    failed: boolean;
    busy: boolean;
    amd: Function;
    amdAsync: Function;
    private _cbQueue;
    private _components;
    constructor(relayInstance: Calling, options: ICallOptions);
    get answered(): boolean;
    get active(): boolean;
    get ended(): boolean;
    get context(): string;
    get peer(): Call;
    get device(): ICallDevice;
    get devices(): DeepArray<ICallDevice>;
    get ready(): boolean;
    get type(): "phone" | "sip";
    get from(): string;
    get to(): string;
    get timeout(): number;
    get headers(): SipHeader[];
    get region(): string;
    get isMultiDial(): boolean;
    setOptions(opts: ICallOptions): void;
    _execute(msg: Execute): Promise<any>;
    dial(): Promise<DialResult>;
    disconnect(): Promise<DisconnectResult>;
    hangup(reason?: string): Promise<HangupResult>;
    answer(): Promise<AnswerResult>;
    record(record?: ICallingRecord): Promise<RecordResult>;
    recordAsync(record?: ICallingRecord): Promise<RecordAction>;
    play(...params: [ICallingPlayParams] | (IRelayCallingPlay | ICallingPlay)[]): Promise<PlayResult>;
    playAsync(...params: [ICallingPlayParams] | (IRelayCallingPlay | ICallingPlay)[]): Promise<PlayAction>;
    playAudio(params: string | {
        url: string;
        volume?: number;
    }): Promise<PlayResult>;
    playAudioAsync(params: string | {
        url: string;
        volume?: number;
    }): Promise<PlayAction>;
    playSilence(duration: number): Promise<PlayResult>;
    playSilenceAsync(duration: number): Promise<PlayAction>;
    playRingtone(params: ICallingPlayRingtone): Promise<PlayResult>;
    playRingtoneAsync(params: ICallingPlayRingtone): Promise<PlayAction>;
    playTTS(params: ICallingPlayTTS): Promise<PlayResult>;
    playTTSAsync(params: ICallingPlayTTS): Promise<PlayAction>;
    prompt(params: ICallingCollect, ...mediaList: (IRelayCallingPlay | ICallingPlay)[]): Promise<PromptResult>;
    promptAsync(params: ICallingCollect, ...mediaList: (IRelayCallingPlay | ICallingPlay)[]): Promise<PromptAction>;
    promptAudio(params: ICallingCollectAudio, url?: string): Promise<PromptResult>;
    promptAudioAsync(params: ICallingCollectAudio, url?: string): Promise<PromptAction>;
    promptRingtone(params: ICallingCollectRingtone): Promise<PromptResult>;
    promptRingtoneAsync(params: ICallingCollectRingtone): Promise<PromptAction>;
    promptTTS(params: ICallingCollectTTS, ttsOptions?: ICallingPlayTTS): Promise<PromptResult>;
    promptTTSAsync(params: ICallingCollectTTS, ttsOptions?: ICallingPlayTTS): Promise<PromptAction>;
    connect(...params: [ICallingConnectParams] | DeepArray<IMakeCallParams>): Promise<ConnectResult>;
    connectAsync(...params: [ICallingConnectParams] | DeepArray<IMakeCallParams>): Promise<ConnectAction>;
    waitFor(...events: string[]): Promise<boolean>;
    waitForRinging(): Promise<boolean>;
    waitForAnswered(): Promise<boolean>;
    waitForEnding(): Promise<boolean>;
    waitForEnded(): Promise<boolean>;
    faxReceive(): Promise<FaxResult>;
    faxReceiveAsync(): Promise<FaxAction>;
    faxSend(document: string, identity?: string, header?: string): Promise<FaxResult>;
    faxSendAsync(document: string, identity?: string, header?: string): Promise<FaxAction>;
    detect(options: ICallingDetect): Promise<DetectResult>;
    detectAsync(options: ICallingDetect): Promise<DetectAction>;
    detectAnsweringMachine(params?: ICallingDetect): Promise<DetectResult>;
    detectAnsweringMachineAsync(params?: ICallingDetect): Promise<DetectAction>;
    detectHuman(params?: ICallingDetect): Promise<DetectResult>;
    detectHumanAsync(params?: ICallingDetect): Promise<DetectAction>;
    detectMachine(params?: ICallingDetect): Promise<DetectResult>;
    detectMachineAsync(params?: ICallingDetect): Promise<DetectAction>;
    detectFax({ tone, timeout }?: ICallingDetect): Promise<DetectResult>;
    detectFaxAsync({ tone, timeout }?: ICallingDetect): Promise<DetectAction>;
    detectDigit({ digits, timeout }?: ICallingDetect): Promise<DetectResult>;
    detectDigitAsync({ digits, timeout }?: ICallingDetect): Promise<DetectAction>;
    tap(params: (ICallingTapTap | ICallingTapFlat), deprecatedDevice?: ICallingTapDevice): Promise<TapResult>;
    tapAsync(params: (ICallingTapTap | ICallingTapFlat), deprecatedDevice?: ICallingTapDevice): Promise<TapAction>;
    sendDigits(digits: string): Promise<SendDigitsResult>;
    sendDigitsAsync(digits: string): Promise<SendDigitsAction>;
    on(event: string, callback: Function): this;
    off(event: string, callback?: Function): this;
    _stateChange(params: {
        call_state: string;
        end_reason?: string;
    }): void;
    _dialChange(params: any): void;
    _connectChange(params: {
        connect_state: string;
        peer?: ICallPeer;
    }): void;
    _recordChange(params: any): void;
    _playChange(params: any): void;
    _collectChange(params: any): void;
    _faxChange(params: any): void;
    _detectChange(params: any): void;
    _tapChange(params: any): void;
    _sendDigitsChange(params: any): void;
    private _notifyComponents;
    private _terminateComponents;
    private _addComponent;
    private _dispatchCallback;
}
