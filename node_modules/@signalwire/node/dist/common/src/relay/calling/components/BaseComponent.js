"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const Blade_1 = require("../../../messages/Blade");
const Blocker_1 = __importDefault(require("../Blocker"));
const Event_1 = __importDefault(require("../Event"));
class BaseComponent {
    constructor(call) {
        this.call = call;
        this.controlId = uuid_1.v4();
        this.completed = false;
        this.successful = false;
        this._eventsToWait = [];
        this.method = null;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.call.ended) {
                return this.terminate();
            }
            if (!this.method) {
                return null;
            }
            const msg = new Blade_1.Execute({
                protocol: this.call.relayInstance.session.relayProtocol,
                method: this.method,
                params: this.payload
            });
            this._executeResult = yield this.call._execute(msg).catch(error => {
                this.terminate();
                return error;
            });
            return this._executeResult;
        });
    }
    _waitFor(...events) {
        return __awaiter(this, void 0, void 0, function* () {
            this._eventsToWait = events;
            this.blocker = new Blocker_1.default(this.eventType, this.controlId);
            yield this.execute();
            return this.blocker.promise;
        });
    }
    terminate(params = {}) {
        this.completed = true;
        this.successful = false;
        this.state = 'failed';
        const { call_state } = params;
        if (call_state) {
            this.event = new Event_1.default(call_state, params);
        }
        if (this._hasBlocker()) {
            this.blocker.resolve();
        }
    }
    _hasBlocker() {
        return this.blocker instanceof Blocker_1.default;
    }
}
exports.BaseComponent = BaseComponent;
