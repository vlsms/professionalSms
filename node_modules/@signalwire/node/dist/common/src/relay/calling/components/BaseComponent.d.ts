import Call from '../Call';
import Blocker from '../Blocker';
import Event from '../Event';
export declare abstract class BaseComponent {
    call: Call;
    abstract eventType: string;
    abstract controlId: string;
    blocker: Blocker;
    state: string;
    completed: boolean;
    successful: boolean;
    event: Event;
    protected _executeResult: any;
    protected _eventsToWait: string[];
    constructor(call: Call);
    abstract method: string;
    abstract get payload(): any;
    execute(): Promise<any>;
    abstract notificationHandler(params: any): void;
    _waitFor(...events: string[]): Promise<any>;
    terminate(params?: any): void;
    protected _hasBlocker(): boolean;
}
