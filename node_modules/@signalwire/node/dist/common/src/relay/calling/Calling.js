"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Handler_1 = require("../../services/Handler");
const logger_1 = __importDefault(require("../../util/logger"));
const Relay_1 = __importDefault(require("../Relay"));
const Call_1 = __importDefault(require("./Call"));
const relay_1 = require("../../util/constants/relay");
const helpers_1 = require("../helpers");
class Calling extends Relay_1.default {
    constructor() {
        super(...arguments);
        this.service = 'calling';
        this._calls = [];
    }
    notificationHandler(notification) {
        const { event_type, params } = notification;
        params.event_type = event_type;
        switch (event_type) {
            case relay_1.CallNotification.Dial:
                return this._onDial(params);
            case relay_1.CallNotification.State:
                return this._onState(params);
            case relay_1.CallNotification.Receive:
                return this._onReceive(params);
            case relay_1.CallNotification.Connect:
                return this._onConnect(params);
            case relay_1.CallNotification.Record:
                return this._onRecord(params);
            case relay_1.CallNotification.Play:
                return this._onPlay(params);
            case relay_1.CallNotification.Collect:
                return this._onCollect(params);
            case relay_1.CallNotification.Fax:
                return this._onFax(params);
            case relay_1.CallNotification.Detect:
                return this._onDetect(params);
            case relay_1.CallNotification.Tap:
                return this._onTap(params);
            case relay_1.CallNotification.SendDigits:
                return this._onSendDigits(params);
        }
    }
    newCall(...params) {
        let devices;
        let region;
        if (params.length === 1 && helpers_1.isIDialCallParams(params[0])) {
            const { region: paramRegion, devices: paramDevices } = params[0];
            devices = helpers_1.prepareDialDevices(paramDevices);
            if (paramRegion) {
                region = paramRegion;
            }
        }
        else {
            const paramsDevices = [];
            params.forEach(p => {
                if (!helpers_1.isIDialCallParams(p)) {
                    paramsDevices.push(p);
                }
            });
            devices = helpers_1.prepareDialDevices(paramsDevices);
        }
        const callOpts = { devices };
        if (region) {
            callOpts.region = region;
        }
        return new Call_1.default(this, callOpts);
    }
    dial(...params) {
        return __awaiter(this, void 0, void 0, function* () {
            const call = this.newCall(...params);
            const result = yield call.dial();
            return result;
        });
    }
    addCall(call) {
        this._calls.push(call);
    }
    removeCall(callToRemove) {
        const index = this._calls.findIndex(call => callToRemove == call);
        if (index >= 0) {
            this._calls.splice(index, 1);
        }
    }
    getCallById(id) {
        return this._calls.find(call => call.id === id);
    }
    getCallByTag(tag) {
        return this._calls.find(call => call.tag === tag);
    }
    _onState(params) {
        const { call_id, node_id, tag } = params;
        const call = this.getCallById(call_id) || this.getCallByTag(tag);
        if (call && !call.isMultiDial) {
            if (!call.ready) {
                call.id = call_id;
                call.nodeId = node_id;
            }
            call._stateChange(params);
        }
        else if (call_id) {
            new Call_1.default(this, params);
        }
        else {
            logger_1.default.debug('\t - Unknown call:', params, '\n\n');
        }
    }
    _onDial(params) {
        const { tag } = params;
        const call = this.getCallByTag(tag);
        call === null || call === void 0 ? void 0 : call._dialChange(params);
    }
    _onConnect(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._connectChange(params);
        }
    }
    _onReceive(params) {
        const call = new Call_1.default(this, params);
        Handler_1.trigger(this.session.relayProtocol, call, this._ctxReceiveUniqueId(call.context));
    }
    _onRecord(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._recordChange(params);
        }
    }
    _onPlay(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._playChange(params);
        }
    }
    _onCollect(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._collectChange(params);
        }
    }
    _onFax(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._faxChange(params);
        }
    }
    _onDetect(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._detectChange(params);
        }
    }
    _onTap(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._tapChange(params);
        }
    }
    _onSendDigits(params) {
        const call = this.getCallById(params.call_id);
        if (call) {
            call._sendDigitsChange(params);
        }
    }
}
exports.default = Calling;
