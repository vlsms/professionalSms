"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Handler_1 = require("../services/Handler");
const Receive_1 = __importDefault(require("../services/Receive"));
class Relay {
    constructor(session) {
        this.session = session;
    }
    onReceive(contexts, handler) {
        return __awaiter(this, void 0, void 0, function* () {
            const success = yield Receive_1.default(this.session, contexts);
            if (success) {
                contexts.forEach(context => Handler_1.register(this.session.relayProtocol, handler, this._ctxReceiveUniqueId(context)));
            }
            return success;
        });
    }
    onStateChange(contexts, handler) {
        return __awaiter(this, void 0, void 0, function* () {
            const success = yield Receive_1.default(this.session, contexts);
            if (success) {
                contexts.forEach(context => Handler_1.register(this.session.relayProtocol, handler, this._ctxStateUniqueId(context)));
            }
            return success;
        });
    }
    _ctxReceiveUniqueId(context) {
        return `${this.service}.ctxReceive.${context}`;
    }
    _ctxStateUniqueId(context) {
        return `${this.service}.ctxState.${context}`;
    }
}
exports.default = Relay;
