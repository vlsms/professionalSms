"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../../util/logger"));
const Handler_1 = require("../../services/Handler");
const relay_1 = require("../../util/constants/relay");
const Relay_1 = __importDefault(require("../Relay"));
const Blade_1 = require("../../messages/Blade");
const SendResult_1 = __importDefault(require("./SendResult"));
const Message_1 = __importDefault(require("./Message"));
class Messaging extends Relay_1.default {
    constructor() {
        super(...arguments);
        this.service = 'messaging';
    }
    notificationHandler(notification) {
        const { event_type, params, context } = notification;
        const message = new Message_1.default(params);
        switch (event_type) {
            case relay_1.MessageNotification.State: {
                logger_1.default.info(`Relay message '${message.id}' changes state to '${message.state}'`);
                return Handler_1.trigger(this.session.relayProtocol, message, this._ctxStateUniqueId(context));
            }
            case relay_1.MessageNotification.Receive: {
                logger_1.default.info(`New Relay ${message.direction} message in context '${context}'`);
                return Handler_1.trigger(this.session.relayProtocol, message, this._ctxReceiveUniqueId(context));
            }
        }
    }
    send(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { from = '', to = '' } = params;
            params.from_number = from;
            params.to_number = to;
            delete params.from;
            delete params.to;
            const msg = new Blade_1.Execute({
                protocol: this.session.relayProtocol,
                method: 'messaging.send',
                params
            });
            const response = yield this.session.execute(msg).catch(error => error);
            logger_1.default.debug('Send message response', response);
            return new SendResult_1.default(response);
        });
    }
}
exports.default = Messaging;
