import BrowserSession from '../BrowserSession';
import Peer from './Peer';
import { State, Direction } from './constants';
import { CallOptions, IWebRTCCall } from './interfaces';
export default abstract class BaseCall implements IWebRTCCall {
    protected session: BrowserSession;
    id: string;
    state: string;
    prevState: string;
    direction: Direction;
    peer: Peer;
    options: CallOptions;
    cause: string;
    causeCode: number;
    channels: string[];
    role: string;
    extension: string;
    private _state;
    private _prevState;
    private gotAnswer;
    private gotEarly;
    private _lastSerno;
    private _targetNodeId;
    private _iceTimeout;
    private _iceDone;
    constructor(session: BrowserSession, opts?: CallOptions);
    get nodeId(): string;
    set nodeId(what: string);
    get localStream(): MediaStream;
    get remoteStream(): MediaStream;
    get memberChannel(): string;
    invite(): void;
    answer(): void;
    hangup(params?: any, execute?: boolean): void;
    transfer(destination: string): void;
    replace(replaceCallID: string): void;
    hold(): any;
    unhold(): any;
    toggleHold(): any;
    dtmf(dtmf: string): void;
    message(to: string, body: string): void;
    muteAudio(): void;
    unmuteAudio(): void;
    toggleAudioMute(): void;
    setAudioInDevice(deviceId: string): Promise<void>;
    muteVideo(): void;
    unmuteVideo(): void;
    toggleVideoMute(): void;
    setVideoDevice(deviceId: string): Promise<void>;
    deaf(): void;
    undeaf(): void;
    toggleDeaf(): void;
    setState(state: State): void;
    handleMessage(msg: any): void;
    handleConferenceUpdate(packet: any, initialPvtData: any): Promise<string>;
    _addChannel(channel: string): void;
    private _subscribeConferenceChat;
    private _subscribeConferenceInfo;
    private _confControl;
    private _subscribeConferenceModerator;
    private _handleChangeHoldStateSuccess;
    private _handleChangeHoldStateError;
    private _onRemoteSdp;
    private _requestAnotherLocalDescription;
    private _onIceSdp;
    private _registerPeerEvents;
    private _checkConferenceSerno;
    private _onMediaError;
    private _dispatchConferenceUpdate;
    private _dispatchNotification;
    private _execute;
    private _init;
    protected _finalize(): void;
}
