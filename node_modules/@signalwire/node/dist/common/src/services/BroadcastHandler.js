"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../util/logger"));
const VertoHandler_1 = __importDefault(require("../webrtc/VertoHandler"));
exports.default = (session, broadcastParams) => {
    const { protocol, event, params } = broadcastParams;
    const { event_type, node_id } = params;
    if (protocol !== session.relayProtocol) {
        return logger_1.default.error('Session protocol mismatch.');
    }
    switch (event) {
        case 'queuing.relay.events':
            if (event_type === 'webrtc.message') {
                const handler = new VertoHandler_1.default(session);
                handler.nodeId = node_id;
                handler.handleMessage(params.params);
            }
            else {
                session.calling.notificationHandler(params);
            }
            break;
        case 'queuing.relay.tasks':
            session.tasking.notificationHandler(params);
            break;
        case 'queuing.relay.messaging':
            session.messaging.notificationHandler(params);
            break;
        default:
            return logger_1.default.error(`Unknown notification type: ${event_type}`);
    }
};
