"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../util/logger"));
const Blade_1 = require("../messages/Blade");
const storage_1 = require("../util/storage/");
const SETUP_PROTOCOL = 'signalwire';
const SETUP_METHOD = 'setup';
const SETUP_CHANNEL = 'notifications';
exports.default = (session) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {};
    const { signature, relayProtocol } = session;
    if (relayProtocol && relayProtocol.split('_')[1] === signature) {
        params.protocol = relayProtocol;
    }
    else {
        const prevProtocol = yield storage_1.sessionStorage.getItem(signature);
        if (prevProtocol) {
            params.protocol = prevProtocol;
        }
    }
    const be = new Blade_1.Execute({ protocol: SETUP_PROTOCOL, method: SETUP_METHOD, params });
    const { protocol = null } = yield session.execute(be);
    if (protocol) {
        yield session.subscribe({ protocol, channels: [SETUP_CHANNEL] });
        yield storage_1.sessionStorage.setItem(signature, protocol);
    }
    else {
        logger_1.default.error('Error during setup the session protocol.');
    }
    return protocol;
});
