"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../util/logger"));
const Blade_1 = require("../messages/Blade");
const method = 'signalwire.receive';
exports.default = (session, contexts) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof contexts === 'string') {
        contexts = [contexts];
    }
    contexts = contexts.filter(Boolean);
    if (!contexts.length) {
        logger_1.default.error('One or more contexts are required.');
        return false;
    }
    contexts = contexts.filter(c => !session.contexts.includes(c));
    if (!contexts.length) {
        return true;
    }
    const { relayProtocol: protocol } = session;
    const be = new Blade_1.Execute({ protocol, method, params: { contexts } });
    const response = yield session.execute(be).catch(error => {
        logger_1.default.error(`Error registering contexts: [${error.code}] ${error.message}`);
        return null;
    });
    if (response === null) {
        return false;
    }
    logger_1.default.info(response.message);
    session.contexts = session.contexts.concat(contexts);
    return true;
});
