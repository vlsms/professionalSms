"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
const RTCPeerConnection = (config) => new window.RTCPeerConnection(config);
exports.RTCPeerConnection = RTCPeerConnection;
const getUserMedia = (constraints) => navigator.mediaDevices.getUserMedia(constraints);
exports.getUserMedia = getUserMedia;
const getDisplayMedia = (constraints) => navigator.mediaDevices.getDisplayMedia(constraints);
exports.getDisplayMedia = getDisplayMedia;
const enumerateDevices = () => navigator.mediaDevices.enumerateDevices();
exports.enumerateDevices = enumerateDevices;
const getSupportedConstraints = () => navigator.mediaDevices.getSupportedConstraints();
exports.getSupportedConstraints = getSupportedConstraints;
const streamIsValid = (stream) => stream && stream instanceof MediaStream;
exports.streamIsValid = streamIsValid;
const attachMediaStream = (tag, stream) => {
    const element = helpers_1.findElementByType(tag);
    if (element === null) {
        return;
    }
    if (!element.getAttribute('autoplay')) {
        element.setAttribute('autoplay', 'autoplay');
    }
    if (!element.getAttribute('playsinline')) {
        element.setAttribute('playsinline', 'playsinline');
    }
    element.srcObject = stream;
};
exports.attachMediaStream = attachMediaStream;
const detachMediaStream = (tag) => {
    const element = helpers_1.findElementByType(tag);
    if (element) {
        element.srcObject = null;
    }
};
exports.detachMediaStream = detachMediaStream;
const muteMediaElement = (tag) => {
    const element = helpers_1.findElementByType(tag);
    if (element) {
        element.muted = true;
    }
};
exports.muteMediaElement = muteMediaElement;
const unmuteMediaElement = (tag) => {
    const element = helpers_1.findElementByType(tag);
    if (element) {
        element.muted = false;
    }
};
exports.unmuteMediaElement = unmuteMediaElement;
const toggleMuteMediaElement = (tag) => {
    const element = helpers_1.findElementByType(tag);
    if (element) {
        element.muted = !element.muted;
    }
};
exports.toggleMuteMediaElement = toggleMuteMediaElement;
const setMediaElementSinkId = (tag, deviceId) => __awaiter(void 0, void 0, void 0, function* () {
    const element = helpers_1.findElementByType(tag);
    if (element === null) {
        return false;
    }
    try {
        yield element.setSinkId(deviceId);
        return true;
    }
    catch (error) {
        return false;
    }
});
exports.setMediaElementSinkId = setMediaElementSinkId;
const sdpToJsonHack = sdp => sdp;
exports.sdpToJsonHack = sdpToJsonHack;
const stopStream = (stream) => {
    if (streamIsValid(stream)) {
        stream.getTracks().forEach(t => t.stop());
    }
    stream = null;
};
exports.stopStream = stopStream;
