"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("./logger"));
const constants_1 = require("./constants");
exports.deepCopy = (obj) => JSON.parse(JSON.stringify(obj));
exports.objEmpty = (obj) => Object.keys(obj).length === 0;
exports.mutateStorageKey = (key) => `${constants_1.STORAGE_PREFIX}${key}`;
exports.mutateLiveArrayData = (data) => {
    const [participantId, participantNumber, participantName, codec, mediaJson, participantData] = data;
    let media = {};
    try {
        media = JSON.parse(mediaJson.replace(/ID"/g, 'Id"'));
    }
    catch (error) {
        logger_1.default.warn('Verto LA invalid media JSON string:', mediaJson);
    }
    return { participantId: Number(participantId), participantNumber, participantName, codec, media, participantData };
};
exports.safeParseJson = (value) => {
    if (typeof value !== 'string') {
        return value;
    }
    try {
        return JSON.parse(value);
    }
    catch (error) {
        return value;
    }
};
exports.isDefined = (variable) => typeof variable !== 'undefined';
exports.isFunction = (variable) => variable instanceof Function || typeof variable === 'function';
exports.findElementByType = (tag) => {
    if (typeof document !== 'object' || !('getElementById' in document)) {
        return null;
    }
    if (typeof tag === 'string') {
        return document.getElementById(tag) || null;
    }
    else if (typeof tag === 'function') {
        return tag();
    }
    else if (tag instanceof HTMLMediaElement) {
        return tag;
    }
    return null;
};
const PROTOCOL_PATTERN = /^(ws|wss):\/\//;
exports.checkWebSocketHost = (host) => {
    const protocol = PROTOCOL_PATTERN.test(host) ? '' : 'wss://';
    return `${protocol}${host}`;
};
exports.destructResponse = (response, nodeId = null) => {
    const { result = {}, error } = response;
    if (error) {
        return { error };
    }
    const { result: nestedResult = null } = result;
    if (nestedResult === null) {
        if (nodeId !== null) {
            result.node_id = nodeId;
        }
        return { result };
    }
    const { code = null, node_id = null, result: vertoResult = null } = nestedResult;
    if (code && code !== '200') {
        return { error: nestedResult };
    }
    if (vertoResult) {
        return exports.destructResponse(vertoResult, node_id);
    }
    return { result: nestedResult };
};
exports.randomInt = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
};
