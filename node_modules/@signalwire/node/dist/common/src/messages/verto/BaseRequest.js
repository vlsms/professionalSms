"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseMessage_1 = __importDefault(require("../BaseMessage"));
const tmpMap = {
    id: 'callID',
    destinationNumber: 'destination_number',
    remoteCallerName: 'remote_caller_id_name',
    remoteCallerNumber: 'remote_caller_id_number',
    callerName: 'caller_id_name',
    callerNumber: 'caller_id_number'
};
class BaseRequest extends BaseMessage_1.default {
    constructor(params = {}) {
        super();
        if (params.hasOwnProperty('dialogParams')) {
            const _a = params.dialogParams, { remoteSdp, localStream, remoteStream, onNotification, camId, micId, speakerId } = _a, dialogParams = __rest(_a, ["remoteSdp", "localStream", "remoteStream", "onNotification", "camId", "micId", "speakerId"]);
            for (const key in tmpMap) {
                if (key && dialogParams.hasOwnProperty(key)) {
                    dialogParams[tmpMap[key]] = dialogParams[key];
                    delete dialogParams[key];
                }
            }
            params.dialogParams = dialogParams;
        }
        this.buildRequest({ method: this.toString(), params });
    }
}
exports.default = BaseRequest;
